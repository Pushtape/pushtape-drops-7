<?php

/**
 * @file
 * Provides functionality to show a diff between two node revisions.
 */

/**
 * Number of items on one page of the revision list.
 */
define('REVISION_LIST_SIZE', 50);

/**
 * Exposed sorting options.
 *
 * No sorting means sorting by delta value for fields.
 */
define('DIFF_SORT_NONE', '0');

/**
 * Exposed sorting options.
 *
 * This normally sorts by the rendered comparison.
 */
define('DIFF_SORT_VALUE', '1');

/**
 * Exposed sorting options.
 *
 * It is up to the field / entity to decide how to handle the sort.
 */
define('DIFF_SORT_CUSTOM', '-1');

/**
 * Implements hook_help().
 */
function diff_help($path, $arg) {
  switch ($path) {
    case 'admin/help#diff':
      $output = '<p>' . t('The diff module overwrites the normal revisions view. The revisions table is enhanced with a possibility to view the difference between two node revisions. Users with the %view_revisions permission will also be able to view the changes between any two selected revisions. You may disable this for individual content types on the content type configuration page. This module also provides a nifty %preview_changes button while editing a post.', array('%preview_changes' => t('View changes'), '%view_revisions' => t('view revisions'))) . '</p>';
      return $output;
    case 'node/%/revisions/%/view':
      // The translated strings should match node_help('node/%/revisions').
      return '<p>' . t('The revisions let you track differences between multiple versions of a post.') . '</p>';
    case 'node/%/revisions/view/%/%':
      return '<p>' . t('Comparing two revisions:') . '</p>';
  }
}

/**
 * The various states that are available.
 */
function diff_avaiable_states($entity_type = NULL) {
  $states = array(
    'raw' => t('Standard'),
    'raw_plain' => t('Marked down'),
  );

  return $states;
}

/**
 * Implements hook_menu().
 *
 * @todo: Review this.
 */
function diff_menu() {
  $items = array();

  /**
   * By using MENU_LOCAL_TASK (and 'tab_parent') we can get the various
   * revision-views to show the View|Edit|Revision-tabs of the node on top,
   * and have the Revisions-tab open. To avoid creating/showing any extra tabs
   * or sub-tabs (tasks below top level) for the various paths (i.e. "Diff",
   * "Show latest" and "Show a specific revision") that need a revision-id (vid)
   * parameter, we make sure to set 'tab_parent' a bit odd. This solution may
   * not be the prettiest one, but by avoiding having two _LOCAL_TASKs sharing
   * a parent that can be accessed by its full path, it seems to work as
   * desired. Breadcrumbs work decently, at least the node link is among the
   * crumbs. For some reason any breadcrumbs "before/above" the node is only
   * seen at 'node/%node/revisions/%/view'.
   */

  // Not used directly, but was created to get the other menu items to work.
  $items['node/%node/revisions/list'] = array(
    'title' => 'List revisions',
    'page callback' => 'diff_diffs_overview',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'diff_node_revision_access',
    'access arguments' => array(1),
    'file' => 'diff.pages.inc',
  );
  $items['node/%node/revisions/view'] = array(
    'title' => 'Diff',
    'page callback' => 'diff_diffs_show',
    'page arguments' => array(1, 4, 5, 6),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'diff_node_revision_access',
    'access arguments' => array(1),
    'tab_parent' => 'node/%/revisions/list',
    'file' => 'diff.pages.inc',
  );

  $items['node/%node/revisions/view/latest'] = array(
    'title' => 'Show latest diff',
    'page callback' => 'diff_latest',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'diff_node_revision_access',
    'access arguments' => array(1),
    'tab_parent' => 'node/%/revisions/view',
    'file' => 'diff.pages.inc',
  );

  // Administrative settings.
  $items['admin/config/content/diff'] = array(
    'title' => 'Diff',
    'description' => 'Diff settings.',
    'file' => 'diff.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('diff_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/content/diff/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/content/diff/fields'] = array(
    'title' => 'Fields',
    'description' => 'Field support and settings overview.',
    'file' => 'diff.admin.inc',
    'page callback' => 'diff_admin_field_overview',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/content/diff/fields/%'] = array(
    'title' => 'Global field settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('diff_admin_global_field_settings', 5),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_VISIBLE_IN_BREADCRUMB,
    'file' => 'diff.admin.inc',
  );

  $items['admin/config/content/diff/entities'] = array(
    'title' => 'Entities',
    'description' => 'Entity settings.',
    'file' => 'diff.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('diff_admin_global_entity_settings', 'node'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/diff/entities/node'] = array(
    'title' => 'Node',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // Safely restriction from core Field UI module.
  if (defined('MAINTENANCE_MODE')) {
    return $items;
  }
  // Create tabs for all entities.
  foreach (entity_get_info() as $entity_type => $entity_info) {
    if ($entity_type == 'node') {
      continue;
    }
    $items['admin/config/content/diff/entities/' . $entity_type] = array(
      'title' => $entity_info['label'],
      'file' => 'diff.admin.inc',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('diff_admin_global_entity_settings', $entity_type),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    );
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function diff_menu_alter(&$callbacks) {
  // Overwrite the default 'Revisions' page.
  $callbacks['node/%node/revisions']['page callback'] = 'diff_diffs_overview';
  $callbacks['node/%node/revisions']['module'] = 'diff';
  $callbacks['node/%node/revisions']['file'] = 'diff.pages.inc';

  $callbacks['node/%node/revisions/%/view']['tab_parent'] = 'node/%/revisions/list';
  $callbacks['node/%node/revisions/%/revert']['tab_parent'] = 'node/%/revisions/%/view';
  $callbacks['node/%node/revisions/%/delete']['tab_parent'] = 'node/%/revisions/%/view';

  $callbacks['node/%node/revisions']['access callback']
      = $callbacks['node/%node/revisions/%/view']['access callback']
      = $callbacks['node/%node/revisions/%/revert']['access callback']
      = $callbacks['node/%node/revisions/%/delete']['access callback'] = 'diff_node_revision_access';
}

/**
 * Implements hook_admin_paths_alter().
 */
function diff_admin_paths_alter(&$paths) {
  // By default, treat all diff pages as administrative.
  if (variable_get('diff_admin_path_node', 1)) {
    $paths['node/*/revisions/view/*/*'] = TRUE;
  }
}

/**
 * Access callback for the node revisions page.
 */
function diff_node_revision_access($node, $op = 'view') {
  $may_revision_this_type = variable_get('diff_enable_revisions_page_node_' . $node->type, TRUE) || user_access('administer nodes');
  return $may_revision_this_type && _node_revision_access($node, $op);
}

/**
 * Implements hook_hook_info().
 */
function diff_hook_info() {
  $hooks['entity_diff'] = array(
    'group' => 'diff',
  );
  $hooks['diff'] = array(
    'group' => 'diff',
  );
  $hooks['field_diff_view_prepare_alter'] = array(
    'group' => 'diff',
  );
  $hooks['field_diff_view_alter'] = array(
    'group' => 'diff',
  );

  return $hooks;
}

/**
 * Implements hook_entity_info_alter().
 *
 * Although the module only provides an UI for comparing nodes, it has an
 * extendable API for any entity, so we supply two view modes for all entities.
 * - diff_standard: This view mode is used to tell the module how to compare
 *                  individual fields. This is used on the revisions page.
 * - diff_complete: The view mode is used to compare the entire entity as a
 *                  single rendered string. This is used by the inline block.
 */
function diff_entity_info_alter(&$entity_info) {
  foreach (array_keys($entity_info) as $entity_type) {
    if (!empty($entity_info[$entity_type]['view modes'])) {
      $entity_info[$entity_type]['view modes'] += array(
        'diff_standard' => array(
          'label' => t('Diff standard'),
          'custom settings' => FALSE,
        ),
        'diff_complete' => array(
          'label' => t('Diff complete'),
          'custom settings' => FALSE,
        ),
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function diff_block_info() {
  return array('inline' => array('info' => t('Inline diff')));
}

/**
 * Implements hook_block_view().
 */
function diff_block_view($delta) {
  if ($delta === 'inline' && user_access('view revisions') && $node = menu_get_object()) {
    $block = array();
    $revisions = node_revision_list($node);
    if (count($revisions) > 1) {
      $block['subject'] = t('Highlight changes');
      $block['content'] = drupal_get_form('diff_inline_form', $node, $revisions);
    }
    return $block;
  }
}

/**
 * Implements hook_node_view_alter().
 */
function diff_node_view_alter(&$build) {
  $node = $build['#node'];
  if (user_access('view revisions') && variable_get('diff_show_diff_inline_node_' . $node->type, FALSE)) {
    // Ugly but cheap way to check that we are viewing a node's revision page.
    if (arg(2) === 'revisions' && arg(3) === $node->vid) {
      module_load_include('inc', 'diff', 'diff.pages');
      $old_vid = _diff_get_previous_vid(node_revision_list($node), $node->vid);
      // $node->content = array('#value' => diff_inline_show($node, $old_vid));
      $build = array('#markup' => diff_inline_show($node, $old_vid));
    }
    $build['#prefix'] = isset($build['#prefix']) ? "<div id='diff-inline-{$node->nid}'>" . $build['#prefix'] : "<div id='diff-inline-{$node->nid}'>";
    $build['#suffix'] = isset($build['#suffix']) ? $build['#suffix'] . "</div>" : "</div>";
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function diff_form_node_form_alter(&$form, $form_state) {
  // Add a 'View changes' button on the node edit form.
  $node = $form['#node'];
  if (variable_get('diff_show_preview_changes_node_' . $node->type, TRUE) && !empty($node->nid)) {
    $form['actions']['preview_changes'] = array(
      '#type' => 'submit',
      '#value' => t('View changes'),
      '#weight' => 12,
      '#submit' => array('diff_node_form_build_preview_changes'),
    );
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function diff_form_node_type_form_alter(&$form, $form_state) {
  if (isset($form['type'])) {
    $type = $form['#node_type'];
    $form['diff'] = array(
      '#title' => t('Diff'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#tree' => FALSE,
    );
    $form['diff']['diff_show_preview_changes_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show %preview_changes button on node edit form', array('%preview_changes' => t('View changes'))),
      '#weight' => 10,
      '#default_value' => variable_get('diff_show_preview_changes_node_' . $type->type, TRUE),
    );
    $form['diff']['diff_show_diff_inline_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show diffs inline for this content type'),
      '#description' => t("You must enable the 'Inline diff' block to use this feature"),
      '#weight' => 10,
      '#default_value' => variable_get('diff_show_diff_inline_node_' . $type->type, FALSE),
    );
    $form['diff']['diff_enable_revisions_page_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable the %revisions page for this content type', array('%revisions' => t('Revisions'))),
      '#weight' => 11,
      '#default_value' => variable_get('diff_enable_revisions_page_node_' . $type->type, TRUE),
    );
    $form['diff']['diff_view_mode_standard_node'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use %view_mode view mode when doing standard field comparisons', array('%view_mode' => t('Diff standard'))),
      '#description' => t('<p>You need to enable this view mode in the @type_label types %custom_display_settings to control settings other than just what fields are shown. Once enabled you can configure many of the diff options used to compare these fields.</p><p><em>If it is not selected, all compatable fields will be compared using default settings.</em></p>', array(
        '@type_label' => $type->name,
        '%custom_display_settings' => t('Custom display settings'),
      )),
      '#weight' => 12,
      '#default_value' => variable_get('diff_view_mode_standard_node_' . $type->type, FALSE),
    );
    $options = array();
    $info = entity_get_info('node');
    foreach ($info['view modes'] as $view_mode => $view_mode_info) {
      $options[$view_mode] = $view_mode_info['label'];
    }
    $form['diff']['diff_view_mode_preview_node'] = array(
      '#type' => 'select',
      '#title' => t('Standard comparison preview'),
      '#description' => t('This governs the %current view mode when doing standard comparisons.', array(
        '%current' => t('Current revision:'),
      )),
      '#options' => $options,
      '#weight' => 13,
      '#default_value' => variable_get('diff_view_mode_preview_node_' . $type->type, 'full'),
      '#empty_value' => '',
      '#empty_option' => t('- Do not display -'),
    );
    $form['diff']['diff_view_mode_inline_node'] = array(
      '#type' => 'select',
      '#title' => t('Inline diff view mode'),
      '#description' => t('This governs what view mode is used to compare and display content in this block.'),
      '#options' => $options,
      '#weight' => 14,
      '#default_value' => variable_get('diff_view_mode_inline_node_' . $type->type, 'diff_complete'),
    );
  }
}

/**
 * Implements hook_node_type_update().
 *
 * This tracks the diff settings in case the node content type is renamed.
 */
function diff_node_type_update($info) {
  if (!empty($info->old_type) && $info->old_type != $info->type) {
    $type_variables = array(
      'diff_show_preview_changes_node',
      'diff_enable_revisions_page_node',
      'diff_show_diff_inline_node',
      'diff_view_mode_standard_node',
      'diff_view_mode_inline_node',
      'diff_view_mode_preview_node',
    );
    foreach ($type_variables as $prefix) {
      $setting = variable_get($prefix . '_' . $info->old_type, NULL);
      if (isset($setting)) {
        variable_del($prefix . '_' . $info->old_type);
        variable_set($prefix . '_' . $info->type, $setting);
      }
    }
  }
}

/**
 * Implements hook_node_type_delete().
 */
function diff_node_type_delete($info) {
  variable_del('diff_show_preview_changes_node_' . $info->type);
  variable_del('diff_enable_revisions_page_node_' . $info->type);
  variable_del('diff_show_diff_inline_node_' . $info->type);
  variable_del('diff_view_mode_standard_node_' . $info->type);
  variable_del('diff_view_mode_inline_node_' . $info->type);
  variable_del('diff_view_mode_preview_node_' . $info->type);
}

/**
 * Submit handler for the 'View changes' action.
 *
 * @see node_form_build_preview()
 */
function diff_node_form_build_preview_changes($form, &$form_state) {
  module_load_include('inc', 'diff', 'diff.pages');
  $old_node = clone node_load($form_state['values']['nid']);
  $node = node_form_submit_build_node($form, $form_state);

  // Create diff of old node and edited node.
  $rows = _diff_body_rows($old_node, $node);

  $header = _diff_default_header(t('Original'), t('Changes'));
  $changes = theme('table__diff__preview', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('class' => 'diff'),
    'colgroups' => _diff_default_cols(),
    'sticky' => FALSE,
  ));

  // Prepend diff to edit form.
  $form_state['node_preview'] = $changes;
  $form_state['rebuild'] = TRUE;
}

/**
 * Implements hook_theme().
 */
function diff_theme() {
  return array(
    'diff_node_revisions' => array(
      'render element' => 'form',
      'file' => 'diff.theme.inc',
    ),
    'diff_header_line' => array(
      'arguments' => array('lineno' => NULL),
      'file' => 'diff.theme.inc',
    ),
    'diff_content_line' => array(
      'arguments' => array('line' => NULL),
      'file' => 'diff.theme.inc',
    ),
    'diff_empty_line' => array(
      'arguments' => array('line' => NULL),
      'file' => 'diff.theme.inc',
    ),
    'diff_inline_form' => array(
      'render element' => 'form',
      'file' => 'diff.theme.inc',
    ),
    'diff_inline_metadata' => array(
      'arguments' => array('node' => NULL),
      'file' => 'diff.theme.inc',
    ),
    'diff_inline_chunk' => array(
      'arguments' => array('text' => '', 'type' => NULL),
      'file' => 'diff.theme.inc',
    ),
  );
}

/**
 * Render the table rows for theme('table').
 *
 * @param string $a
 *   The source string to compare from.
 * @param string $b
 *   The target string to compare to.
 * @param boolean $show_header
 *   Display diff context headers, e.g. "Line x".
 * @param array $line_stats
 *   This structure tracks line numbers across multiple calls to DiffFormatter.
 *
 * @return array
 *   Array of rows usable with theme('table').
 */
function diff_get_rows($a, $b, $show_header = FALSE, &$line_stats = NULL) {
  $a = is_array($a) ? $a : explode("\n", $a);
  $b = is_array($b) ? $b : explode("\n", $b);

  if (!isset($line_stats)) {
    $line_stats = array(
      'counter' => array('x' => 0, 'y' => 0),
      'offset' => array('x' => 0, 'y' => 0),
    );
  }
  $formatter = new DrupalDiffFormatter();
  // Header is the line counter.
  $formatter->show_header = $show_header;
  $formatter->line_stats = &$line_stats;
  $diff = new Diff($a, $b);
  return $formatter->format($diff);
}

/**
 * Render and markup a diff of two strings into HTML markup.
 *
 * @param string $a
 *   The source string to compare from.
 * @param string $b
 *   The target string to compare to.
 *
 * @return string
 *   String containing HTML markup.
 */
function diff_get_inline($a, $b) {
  $diff = new DrupalDiffInline($a, $b);
  return $diff->render();
}

/**
 * Form builder: Inline diff controls.
 */
function diff_inline_form($form, $form_state, $node, $revisions) {
  $form = array();
  $form['node'] = array(
    '#type' => 'value',
    '#value' => $node,
  );
  $form['revision'] = array(
    '#type' => 'select',
    '#options' => array(0 => '< ' . t('No highlighting') . ' >'),
    '#default_value' => (arg(2) === 'revisions' && arg(3) === $node->vid) ? $node->vid : 0,
    '#ajax' => array(
      'callback' => 'diff_inline_ajax',
      'wrapper' => "node-{$node->nid}",
      'method' => 'replace',
    ),
  );
  foreach ($revisions as $revision) {
    $form['revision']['#options'][$revision->vid] = t('@revision by @name', array(
      '@revision' => format_date($revision->timestamp, 'short'),
      '@name' => $revision->name,
    ));
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('View'),
    '#submit' => array('diff_inline_form_submit'),
    '#attributes' => array('class' => array('diff-js-hidden')),
  );
  return $form;
}

/**
 * AHAH callback for rendering the inline diff of a node.
 */
function diff_inline_ajax($form, $form_state) {
  module_load_include('inc', 'diff', 'diff.pages');
  $node = $form['node']['#value'];
  $vid = isset($form_state['values']['revision']) ? $form_state['values']['revision'] : 0;
  return "<div id='node-{$node->nid}'>" . diff_inline_show($node, $vid) . "</div>";
}

/**
 * Form submission handler for diff_inline_form() for JS-disabled clients.
 */
function diff_inline_form_submit(&$form, &$form_state) {
  if (isset($form_state['values']['revision'], $form_state['values']['node'])) {
    $node = $form_state['values']['node'];
    $vid = $form_state['values']['revision'];
    $form_state['redirect'] = "node/{$node->nid}/revisions/{$vid}/view";
  }
}

/**
 * A helper function to normalise system differences.
 *
 * This handles differences in:
 * - line endings: Mac, Windows and UNIX all use different line endings.
 */
function diff_normalise_text($text) {
  if (variable_get('diff_normalise_text', 0) && drupal_strlen($text)) {
    // Convert all Windows and Mac newlines to a single newline, so diff only
    // need to deal with one possibility.
    $text = str_replace(array("\r\n", "\r"), "\n", $text);
  }
  return $text;
}

/**
 * A wrapper function for filter_xss() to exclude all tags.
 */
function diff_filter_xss($string) {
  return filter_xss($string, array());
}

/**
 * Implements hook_field_formatter_info_alter().
 *
 * This adds the additional settings that are used by the module if the view
 * mode is used.
 *
 * This require the Field formatter settings (field_formatter_settings) module.
 */
function diff_field_formatter_info_alter(&$formatters) {
  foreach ($formatters as $formatter => $info) {
    $settings = &$formatters[$formatter]['settings'];
    $settings += array(
      'diff_custom' => 0,
      'diff_custom_settings' => array(),
    );
  }
}

/**
 * Implements hook_field_formatter_settings_form_alter().
 *
 * This require the Field formatter settings (field_formatter_settings) module.
 */
function diff_field_formatter_settings_form_alter(array &$settings_form, array $context) {
  if (diff_supported_view_mode($context['view_mode'])) {
    module_load_include('diff.inc', 'diff');
    $field = $context['field'];
    $instance = $context['instance'];
    $display = $instance['display'][$context['view_mode']];
    $display['settings'] += array(
      'diff_custom' => 0,
      'diff_custom_settings' => array(),
    );

    $settings_form['diff_custom'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable custom Diff settings'),
      '#default_value' => $display['settings']['diff_custom'],
    );
    $settings_form['diff_custom_settings'] = array(
      '#type' => 'container',
      '#states' => array(
        'visible' => array(
          ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][diff_custom]"]' => array('checked' => TRUE),
        ),
      ),
    );

    // This will handle the autoload for the field module.
    $diff_settings = diff_get_field_instance_settings($context);
    $func = $field['module'] . '_field_diff_options_form';
    if (function_exists($func) && $options_form = $func($field['type'], $diff_settings)) {
      $settings_form['diff_custom_settings'] += $options_form;
    }
    diff_global_settings_form($settings_form['diff_custom_settings'], $form_state, $type, $settings);
  }
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * This require the Field formatter settings (field_formatter_settings) module.
 */
function diff_field_formatter_settings_summary_alter(&$summary, array $context) {
  if (diff_supported_view_mode($context['view_mode'])) {
    $field = $context['field'];
    $display = $context['instance']['display'][$context['view_mode']];

    $summary = empty($summary) ? '' : $summary . '<br />';
    if (empty($display['settings']['diff_custom'])) {
      $summary .= t('Diff custom settings: No');
    }
    else {
      $summary .= t('Diff custom settings: Yes');
    }
  }
}

/**
 * Helper function to check the view mode.
 */
function diff_supported_view_mode($view_mode) {
  return in_array($view_mode, array('diff_standard', 'diff_complete'));
}

/**
 * Helper function to load any CSS or JScript files required by a page or form.
 */
function diff_build_attachments($jscript = FALSE) {
  $attachments = array();
  if ($theme = variable_get('diff_theme', 'default')) {
    $attachments['css'] = array(
      drupal_get_path('module', 'diff') . "/css/diff.{$theme}.css",
    );
  }
  if ($jscript && $type = variable_get('diff_script_revisioning', 'simple')) {
    $attachments['js'] = array(
      drupal_get_path('module', 'diff') . "/js/diff.js",
      array(
        'data' => array('diffRevisionRadios' => $type),
        'type' => 'setting',
      ),
    );
  }
  return $attachments;
}
